{"version":3,"sources":["globals/constants/labels.js","components/filters/button.jsx","globals/constants/yearFilters.js","globals/constants/filterValues.js","components/filters/launch-year.jsx","components/filters/launch-status.jsx","components/filters/landing-status.jsx","components/filters/filters.jsx","components/launch-list/launch-item.jsx","globals/constants/messages.js","globals/constants/endpoints.js","services/index.js","components/launch-list/launch-list.jsx","App.js","serviceWorker.js","index.js"],"names":["LABELS","header","filter","year","launchSuccess","landSuccess","launchItem","missionIds","launchYear","developer","FilterButton","title","isChecked","onClick","className","map","item","toString","ACTUAL_VALUES","True","False","FILTER_VALUES","true","false","none","LaunchYear","updateYears","didMount","React","useRef","useState","selectedYear","setSelectedYear","useEffect","current","handleClick","LaunchYears","key","LaunchStatus","updateSuccessLaunch","status","setStatus","handleStatusChange","update","LandingStatus","updateSuccessLand","VALUES","memo","years","LaunchItem","src","missionName","flightNumber","alt","index","MESSAGES","loading","requestCancelled","noItemsFounds","serverError","offline","endpoints","launches","source","axios","CancelToken","LaunchList","filters","successLand","successLaunch","launchList","isLoading","hasError","launchListStatus","setLaunchListStatus","cancel","get","params","launch_year","undefined","land_success","launch_success","cancelToken","token","timeout","getLaunches","then","resp","data","length","catch","err","handleError","isCancel","navigator","onLine","launch","mission_name","flight_number","links","mission_patch_small","mission_id","rocket","first_stage","cores","initialState","reducer","state","action","type","payload","App","useReducer","dispatch","handleUpdateYearsCallback","useCallback","handleUpdateYears","handleUpdateSuccessLaunchCallback","handleUpdateSuccessLaunch","handleUpdateSuccessLandCallback","handleUpdateSuccessLand","Fragment","Labels","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.2d36f070.chunk.js","sourcesContent":["const LABELS = {\n    header: 'SpaceX Launch Programs',\n    filter: {\n        year: 'Launch Year',\n        launchSuccess: 'Launch Success',\n        landSuccess: 'Land Success',\n    },\n    launchItem: {\n        missionIds: 'Mission Ids:',\n        launchYear: 'Launch Year:',\n        launchSuccess: 'Successful Launch:',\n        landSuccess: 'Successful Land:',\n    },\n    developer: 'Aakash Jha',\n};\n\nexport default LABELS;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './filters.scss';\n\nconst FilterButton = ({ title, isChecked, onClick, ..._ }) => {\n    const getClick = () => {\n        onClick(title);\n    };\n\n    return (\n        <div\n            className={`checkbox-list__item ${\n                isChecked ? 'checkbox-list__item--pressed' : ''\n            }`}\n            onClick={getClick}\n        >\n            <span>{title}</span>\n        </div>\n    );\n};\n\nFilterButton.propTypes = {\n    title: PropTypes.string.isRequired,\n    isChecked: PropTypes.bool,\n    onClick: PropTypes.func,\n};\n\nexport default FilterButton;\n","// could be generated dynamically as well\n\nexport default [\n    2006,\n    2007,\n    2008,\n    2009,\n    2010,\n    2011,\n    2012,\n    2013,\n    2014,\n    2015,\n    2016,\n    2017,\n    2018,\n    2019,\n    2020,\n].map((item) => item.toString());\n","const FILTER_VALUES = {\n    true: 'True',\n    false: 'False',\n    none: '',\n};\n\nexport const ACTUAL_VALUES = {\n    True: true,\n    False: false,\n};\n\nexport default FILTER_VALUES;\n","import React from 'react';\nimport FilterButton from './button';\nimport LaunchYears from '../../globals/constants/yearFilters';\nimport LABELS from '../../globals/constants/labels';\nimport FILTER_VALUES from '../../globals/constants/filterValues';\n\nconst LaunchYear = ({ updateYears }) => {\n    const didMount = React.useRef(false);\n    const [selectedYear, setSelectedYear] = React.useState(FILTER_VALUES.none);\n\n    React.useEffect(() => {\n        if (didMount.current) {\n            updateYears(selectedYear);\n        } else {\n            didMount.current = true;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [selectedYear]);\n\n    const handleClick = (year) => {\n        if (selectedYear === year) {\n            setSelectedYear(FILTER_VALUES.none);\n        } else {\n            setSelectedYear(year);\n        }\n    };\n\n    return (\n        <div className=\"sub-filter\">\n            <span className=\"sub-filter__text\">{LABELS.filter.year}</span>\n            <p className=\"divider\" />\n            <div className=\"checkbox-list\">\n                {LaunchYears.map((year) => (\n                    <FilterButton\n                        key={year}\n                        title={year}\n                        isChecked={selectedYear === year}\n                        onClick={handleClick}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default LaunchYear;\n","import React from 'react';\nimport FilterButton from './button';\nimport LABELS from '../../globals/constants/labels';\nimport FILTER_VALUES from '../../globals/constants/filterValues';\n\nconst LaunchStatus = ({ updateSuccessLaunch }) => {\n    const didMount = React.useRef(false);\n    const [status, setStatus] = React.useState(FILTER_VALUES.none);\n\n    React.useEffect(() => {\n        if (didMount.current) {\n            updateSuccessLaunch(status);\n        } else {\n            didMount.current = true;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [status]);\n\n    const handleStatusChange = (update) => {\n        if (update === status) {\n            setStatus(FILTER_VALUES.none);\n        } else {\n            setStatus(update);\n        }\n    };\n\n    return (\n        <div className=\"sub-filter\">\n            <span className=\"sub-filter__text\">\n                {LABELS.filter.launchSuccess}\n            </span>\n            <p className=\"divider\" />\n            <div className=\"checkbox-list\">\n                <FilterButton\n                    title={FILTER_VALUES.true}\n                    isChecked={status === FILTER_VALUES.true}\n                    onClick={handleStatusChange}\n                />\n                <FilterButton\n                    title={FILTER_VALUES.false}\n                    isChecked={status === FILTER_VALUES.false}\n                    onClick={handleStatusChange}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default LaunchStatus;\n","import React from 'react';\nimport FilterButton from './button';\nimport LABELS from '../../globals/constants/labels';\nimport VALUES from '../../globals/constants/filterValues';\n\nconst LandingStatus = ({ updateSuccessLand }) => {\n    const didMount = React.useRef(false);\n    const [status, setStatus] = React.useState(VALUES.none);\n\n    React.useEffect(() => {\n        if (didMount.current) {\n            updateSuccessLand(status);\n        } else {\n            didMount.current = true;\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [status]);\n\n    const handleStatusChange = (update) => {\n        if (update === status) {\n            setStatus(VALUES.none);\n        } else {\n            setStatus(update);\n        }\n    };\n\n    return (\n        <div className=\"sub-filter\">\n            <span className=\"sub-filter__text\">\n                {LABELS.filter.landSuccess}\n            </span>\n            <p className=\"divider\" />\n            <div className=\"checkbox-list\">\n                <FilterButton\n                    title={VALUES.true}\n                    isChecked={status === VALUES.true}\n                    onClick={handleStatusChange}\n                />\n                <FilterButton\n                    title={VALUES.false}\n                    isChecked={status === VALUES.false}\n                    onClick={handleStatusChange}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default LandingStatus;\n","import React from 'react';\nimport LaunchYear from './launch-year';\nimport './filters.scss';\nimport LaunchStatus from './launch-status';\nimport LandingStatus from './landing-status';\n\nconst Filters = ({ updateYears, updateSuccessLaunch, updateSuccessLand }) => {\n    const handleYearsUpdate = (years) => {\n        updateYears(years);\n    };\n\n    const handleSuccessfulLaunchUpdate = (status) => {\n        updateSuccessLaunch(status);\n    };\n\n    const handleSuccessfulLandUpdate = (status) => {\n        updateSuccessLand(status);\n    };\n\n    return (\n        <aside className=\"page-filters\">\n            <h2 className=\"page-filters__header\">Filters</h2>\n            <LaunchYear updateYears={handleYearsUpdate} />\n            <LaunchStatus updateSuccessLaunch={handleSuccessfulLaunchUpdate} />\n            <LandingStatus updateSuccessLand={handleSuccessfulLandUpdate} />\n        </aside>\n    );\n};\n\nexport default React.memo(Filters);\n","import React from 'react';\nimport './launches.scss';\nimport PropTypes from 'prop-types';\nimport LABELS from '../../globals/constants/labels';\n\nconst LaunchItem = ({\n    src,\n    missionName,\n    flightNumber,\n    missionIds,\n    launchYear,\n    launchSuccess,\n    landSuccess,\n}) => {\n    return (\n        <div className=\"launch-list__item\">\n            <img\n                className=\"launch-list__item__avatar\"\n                src={src}\n                alt=\"mission-patch\"\n            />\n            <h3 className=\"launch-list__item__title\">{`${missionName} #${flightNumber}`}</h3>\n            <div className=\"launch-list__item__list\">\n                <h3 className=\"subtitle__header\">\n                    {LABELS.launchItem.missionIds}\n                </h3>\n                <ul className=\"subtitle_list\">\n                    {missionIds.map((item, index) => (\n                        <li key={index}>{item}</li>\n                    ))}\n                </ul>\n            </div>\n            <div className=\"launch-list__item__subtitle\">\n                <h3 className=\"subtitle__header\">\n                    {LABELS.launchItem.launchYear}\n                </h3>\n                <p className=\"subtitle__text\">{launchYear}</p>\n            </div>\n            <div className=\"launch-list__item__subtitle\">\n                <h3 className=\"subtitle__header\">\n                    {LABELS.launchItem.launchSuccess}\n                </h3>\n                <p className=\"subtitle__text\">\n                    {typeof launchSuccess !== 'object'\n                        ? launchSuccess.toString()\n                        : 'Unknown'}\n                </p>\n            </div>\n            <div className=\"launch-list__item__subtitle\">\n                <h3 className=\"subtitle__header\">\n                    {LABELS.launchItem.landSuccess}\n                </h3>\n                <p className=\"subtitle__text\">\n                    {typeof landSuccess !== 'object'\n                        ? landSuccess.toString()\n                        : 'Unknown'}\n                </p>\n            </div>\n        </div>\n    );\n};\n\nLaunchItem.propTypes = {\n    src: PropTypes.string.isRequired,\n    missionName: PropTypes.string.isRequired,\n    flightNumber: PropTypes.string.isRequired,\n    missionIds: PropTypes.arrayOf(PropTypes.string).isRequired,\n    launchYear: PropTypes.string.isRequired,\n    launchSuccess: PropTypes.bool.isRequired,\n    landSuccess: PropTypes.bool.isRequired,\n};\n\nexport default LaunchItem;\n","const MESSAGES = {\n    loading: 'Searching...',\n    requestCancelled: 'Searching for latest changes...',\n    noItemsFounds: 'No Launches to show!',\n    serverError: 'Unable to contact the server!',\n    offline: 'Connectivity lost!',\n};\n\nexport default MESSAGES;\n","const endpoints = {\n    launches: 'https://api.spacexdata.com/v3/launches',\n};\n\nexport default endpoints;\n","import axios from 'axios';\nimport { ACTUAL_VALUES } from '../globals/constants/filterValues';\nimport endpoints from '../globals/constants/endpoints';\n\nlet source = axios.CancelToken.source();\n\nconst getLaunches = (year, successLand, successLaunch) => {\n    source.cancel();\n    source = axios.CancelToken.source();\n    return axios.get(endpoints.launches, {\n        params: {\n            launch_year: year || undefined,\n            land_success:\n                typeof ACTUAL_VALUES[successLand] !== 'boolean'\n                    ? undefined\n                    : ACTUAL_VALUES[successLand],\n            launch_success:\n                typeof ACTUAL_VALUES[successLaunch] !== 'boolean'\n                    ? undefined\n                    : ACTUAL_VALUES[successLaunch],\n        },\n        cancelToken: source.token,\n        timeout: 7000,\n    });\n};\n\nexport { getLaunches };\n","import React from 'react';\nimport './launches.scss';\nimport LaunchItem from './launch-item';\nimport axios from 'axios';\nimport MESSAGES from '../../globals/constants/messages';\nimport { getLaunches } from '../../services';\n\nconst LaunchList = ({ filters: { year, successLand, successLaunch } }) => {\n    const [launchListStatus, setLaunchListStatus] = React.useState({\n        launchList: [],\n        isLoading: false,\n        hasError: '',\n    });\n\n    React.useEffect(() => {\n        setLaunchListStatus({\n            ...launchListStatus,\n            isLoading: true,\n            launchList: [],\n            hasError: '',\n        });\n        getLaunches(year, successLand, successLaunch)\n            .then((resp) => {\n                const data = resp.data;\n                setLaunchListStatus({\n                    ...launchListStatus,\n                    isLoading: false,\n                    launchList: data.length ? data : [],\n                    hasError: data.length ? false : MESSAGES.noItemsFounds,\n                });\n            })\n            .catch((err) => {\n                handleError(err);\n            });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [year, successLand, successLaunch]);\n\n    const handleError = (err) => {\n        if (axios.isCancel(err)) {\n            setLaunchListStatus({\n                ...launchListStatus,\n                isLoading: false,\n                hasError: MESSAGES.requestCancelled,\n            });\n        } else {\n            if (!navigator.onLine) {\n                setLaunchListStatus({\n                    ...launchListStatus,\n                    isLoading: false,\n                    hasError: MESSAGES.offline,\n                });\n            } else {\n                setLaunchListStatus({\n                    ...launchListStatus,\n                    isLoading: false,\n                    hasError: MESSAGES.serverError,\n                });\n            }\n        }\n    };\n\n    return (\n        <section className=\"launch-list-wrapper\">\n            <div className=\"launch-list\">\n                {launchListStatus.isLoading && <p>{MESSAGES.loading}</p>}\n                {!launchListStatus.isLoading && !launchListStatus.hasError ? (\n                    launchListStatus.launchList.map((launch) => (\n                        <LaunchItem\n                            key={\n                                launch.mission_name +\n                                launch.flight_number.toString()\n                            }\n                            src={launch.links.mission_patch_small}\n                            missionName={launch.mission_name}\n                            flightNumber={launch.flight_number.toString()}\n                            missionIds={launch.mission_id}\n                            launchYear={launch.launch_year}\n                            landSuccess={\n                                launch.rocket.first_stage.cores[0].land_success\n                            }\n                            launchSuccess={launch.launch_success}\n                        />\n                    ))\n                ) : (\n                    <p>{launchListStatus.hasError}</p>\n                )}\n            </div>\n        </section>\n    );\n};\n\nexport default LaunchList;\n","import React from 'react';\nimport './App.scss';\nimport Labels from './globals/constants/labels';\nimport Filters from './components/filters/filters';\nimport LaunchList from './components/launch-list/launch-list';\nimport FILTER_VALUES from './globals/constants/filterValues';\n\nconst initialState = {\n    year: FILTER_VALUES.none,\n    successLand: FILTER_VALUES.none,\n    successLaunch: FILTER_VALUES.none,\n};\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case 'UPDATE_YEARS':\n            return {\n                ...state,\n                year: action.payload.year,\n            };\n        case 'UPDATE_SUCCESS_LAUNCH':\n            return {\n                ...state,\n                successLaunch: action.payload.successLaunch,\n            };\n        case 'UPDATE_SUCCESS_LAND':\n            return {\n                ...state,\n                successLand: action.payload.successLand,\n            };\n        default:\n            return {\n                ...state,\n            };\n    }\n};\n\nfunction App() {\n    const [filters, dispatch] = React.useReducer(reducer, initialState);\n\n    const handleUpdateYearsCallback = React.useCallback(\n        (year) => handleUpdateYears(year),\n        []\n    );\n\n    const handleUpdateSuccessLaunchCallback = React.useCallback(\n        (successLaunch) => handleUpdateSuccessLaunch(successLaunch),\n        []\n    );\n\n    const handleUpdateSuccessLandCallback = React.useCallback(\n        (successLand) => handleUpdateSuccessLand(successLand),\n        []\n    );\n\n    const handleUpdateYears = (year) => {\n        dispatch({\n            type: 'UPDATE_YEARS',\n            payload: {\n                year,\n            },\n        });\n    };\n\n    const handleUpdateSuccessLaunch = (successLaunch) => {\n        dispatch({\n            type: 'UPDATE_SUCCESS_LAUNCH',\n            payload: {\n                successLaunch,\n            },\n        });\n    };\n\n    const handleUpdateSuccessLand = (successLand) => {\n        dispatch({\n            type: 'UPDATE_SUCCESS_LAND',\n            payload: {\n                successLand,\n            },\n        });\n    };\n\n    return (\n        <React.Fragment>\n            <header className=\"page-title\">\n                <h1 className=\"page-title__text\">{Labels.header}</h1>\n            </header>\n            <section className=\"page-content\">\n                <Filters\n                    updateYears={handleUpdateYearsCallback}\n                    updateSuccessLaunch={handleUpdateSuccessLaunchCallback}\n                    updateSuccessLand={handleUpdateSuccessLandCallback}\n                />\n                <LaunchList filters={filters} />\n            </section>\n            <section className=\"filler\" />\n            <footer className=\"page-footer\">\n                <p className=\"page-footer__text\">Developed by:</p>\n                <p className=\"page-footer__name\">{Labels.developer}</p>\n            </footer>\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}